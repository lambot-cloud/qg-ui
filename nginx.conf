#user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log;
pid /run/nginx/nginx.pid;

# Load dynamic modules. See /usr/share/nginx/README.dynamic.
include /usr/share/nginx/modules/*.conf;

events {
    worker_connections 1024;
}

http {
    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  /var/log/nginx/access.log  main;

    server_tokens       off;
    sendfile            on;
    tcp_nopush          on;
    tcp_nodelay         on;
    keepalive_timeout   65;
    types_hash_max_size 2048;
    client_max_body_size 40M;
    gzip on;
    gzip_comp_level 5;
    gzip_disable "msie6";
    gzip_types text/plain text/css application/json application/x-javascript application/javascript text/xml application/xml application/xml+rss text/javascript image/svg+xml image/jpeg image/png;

    include             /etc/nginx/mime.types;
    default_type        application/octet-stream;

    # Define cache control policies based on file extensions
    map $uri $cache_control {
        default                         "no-store, no-cache, must-revalidate";
        ~*\.(css|png|jpg|jpeg|gif|ico|svg)$  "public, max-age=31536000, immutable";
    }

    include /etc/nginx/conf.d/*.conf;

    server {
        listen       5000;
        server_name  _;
        root /usr/share/nginx/html;
        index index.html;

        # Security headers - applied to all responses
        add_header X-Content-Type-Options "nosniff" always;
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header Referrer-Policy "strict-origin-when-cross-origin" always;
        add_header Cache-Control $cache_control always;
        
        # Handle static files
        location / {
            try_files $uri $uri/ /index.html;
        }

        # Handle JavaScript files
        location ~* \.(js|mjs)$ {
            try_files $uri =404;
        }

        # Handle static assets
        location ~* \.(css|png|jpg|jpeg|gif|ico|svg)$ {
            try_files $uri =404;
        }

        error_page 404 /404.html;
        location = /40x.html {
        }

        error_page 500 502 503 504 /50x.html;
        location = /50x.html {
        }

        location /health {
            access_log off;
            return 200 '{"status": "OK"}';
            default_type application/json;
        }
    }
}